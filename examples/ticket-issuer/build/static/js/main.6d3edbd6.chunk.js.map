{"version":3,"sources":["Card/index.js","App.js","reportWebVitals.js","index.js"],"names":["MediaCard","tokenInstance","ticketClass","ticketId","devconId","className","Typography","gutterBottom","variant","component","toString","color","src","mockTicketData","ticket","secret","id","App","document","hasStorageAccess","then","hasAccess","console","log","requestStorageAccess","hasAccessFromRequest","useState","tokens","setTokens","negotiator","Negotiator","useEffect","getTokenInstances","res","success","href","length","map","index","mockTicket","onClick","event","preventDefault","addTokenThroughIframe","setTimeout","openTicketInNewTab","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iQA0BeA,MAtBf,YAAuC,IAAlBC,EAAiB,EAAjBA,cAGXC,EAAoCD,EAApCC,YAAaC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SAC/B,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,cAACC,EAAA,EAAD,CAAYD,UAAU,cAAcE,cAAY,EAACC,QAAQ,KAAKC,UAAU,KAAxE,SACGP,GAAeA,EAAYQ,aAE9B,cAACJ,EAAA,EAAD,CAAYD,UAAU,WAAWG,QAAQ,QAAQG,MAAM,gBAAgBF,UAAU,IAAjF,SACGN,GAAYA,EAASO,aAExB,eAACJ,EAAA,EAAD,CAAYD,UAAU,WAAWG,QAAQ,QAAQG,MAAM,gBAAgBF,UAAU,IAAjF,wBACcL,GAAYA,EAASM,iBAGrC,qBAAKL,UAAU,YAAYO,IAAI,iCCd/BC,G,MAAiB,CACrB,CACEC,OAAQ,+MACRC,OAAO,cACPC,GAAG,eAEL,CACEF,OAAQ,mNACRC,OAAO,cACPC,GAAG,eAEL,CACEF,OAAQ,2MACRC,OAAO,cACPC,GAAG,eAEL,CACEF,OAAQ,2MACRC,OAAO,cACPC,GAAG,iBAkGQC,MA9Ff,WAEKC,SAASC,kBACVD,SAASC,mBAAmBC,MAAK,SAACC,GAChCC,QAAQC,IAAI,gBAAiBF,GACxBA,GACHH,SAASM,uBAAuBJ,MAAK,SAAAK,GACnCH,QAAQC,IAAI,6BAA8BE,SAOlD,MAA0BC,mBAAS,IAAnC,mBAAKC,EAAL,KAAaC,EAAb,KAKMC,EAAa,IAAIC,IAHR,GACD,gBACE,IA4BhB,OAzBAC,qBAAU,WAERF,EAAWG,mBAAkB,SAAAC,GACxBA,EAAIC,SAASN,EAAUK,EAAIN,aAE/B,IAqBD,iCACE,mBAAGQ,KAAK,IAAR,SAAY,qBAAK9B,UAAU,OAAOO,IAAI,mBACtC,qBAAKP,UAAU,aAAf,SACE,+DAEF,qBAAKA,UAAU,aAAf,SACE,qBAAKA,UAAU,gBAAgBO,IAAI,0BAErC,qBAAKP,UAAU,aAAf,SACE,2KAEF,qBAAKA,UAAU,aAAf,SACE,gDAEF,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,gBAAf,UAEIsB,GAAUA,EAAOS,OAAS,GAAKT,EAAOU,KAAI,SAACpC,EAAeqC,GACxD,OAAO,cAAC,EAAD,CAAkBrC,cAAeA,GAAtBqC,OAInBX,EAAOS,QAAU,gCAChB,oDACA,iDACA,qBAAK/B,UAAU,gBAAf,SAEIQ,EAAewB,KAAI,SAACE,EAAYD,GAC9B,OACE,wBAAoBjC,UAAU,aAAamC,QAAS,SAAAC,GAAK,OA5ClD,SAAC,GAAiC,IAAhCA,EAA+B,EAA/BA,MAAO3B,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,GAClDyB,EAAMC,iBACNb,EAAWc,sBAAsB,CAAE7B,SAAQC,SAAQC,OAKnD4B,YAAW,WACTf,EAAWG,mBAAkB,SAAAC,GACxBA,EAAIC,SAASN,EAAUK,EAAIN,aAE/B,KAiC4EkB,CAAmB,CAC9EJ,QACA3B,OAAQyB,EAAWzB,OACnBC,OAAQwB,EAAWxB,OACnBC,GAAIuB,EAAWvB,MAJjB,0BAAasB,oBC9FpBQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASuC,eAAe,SAM1BX,M","file":"static/js/main.6d3edbd6.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport './Card.css';\n\nfunction MediaCard({ tokenInstance }) {\n\n  // New Data Structure:\n  const { ticketClass, ticketId, devconId } = tokenInstance;\n  return (\n    <div className=\"ticketContainer\">\n      <div className=\"ticketDetails\">\n        <Typography className=\"ticketClass\" gutterBottom variant=\"h5\" component=\"h2\">\n          {ticketClass && ticketClass.toString()}\n        </Typography>\n        <Typography className=\"ticketId\" variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {ticketId && ticketId.toString()}\n        </Typography>\n        <Typography className=\"devconId\" variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          Devcon ID: {devconId && devconId.toString()}\n        </Typography>\n      </div>\n      <img className=\"ticketImg\" src=\"ticket_example_image.svg\"></img>\n    </div>\n  );\n}\n\nexport default MediaCard;\n","import React, { useState, useEffect } from 'react';\nimport { Negotiator } from 'token-negotiator';\nimport Card from './Card';\nimport './App.css';\n\n// A minimal example to read tokens and render them to a view.\n\nconst mockTicketData = [\n  {\n    ticket: \"MIGWMA0MATYCBWE3ap3-AgEABEEEKJZVxMEXbkSZZBWnNUTX_5ieu8GUqf0bx_a0tBPF6QYskABaMJBYhDOXsmQt3csk_TfMZ2wdmfRkK7ePCOI2kgNCAOOZKRpcE6tLBuPbfE_SmwPk2wNjbj5vpa6kkD7eqQXvBOCa0WNo8dEHKvipeUGZZEWWjJKxooB44dEYdQO70Vgc\",\n    secret:\"45845870684\",\n    id:\"mah@mah.com\"\n  },\n  {\n    ticket: \"MIGXMA4MAjExAgVhN2qd_gIBAARBBCiWVcTBF25EmWQVpzVE1_-YnrvBlKn9G8f2tLQTxekGLJAAWjCQWIQzl7JkLd3LJP03zGdsHZn0ZCu3jwjiNpIDQgBbJBY1Ctlp_czUwB85yF1e5kpZ-lQ_-UZ7jaCYSFoEx028Jit1HIDLCJezKdsNn9c9IO7-HC-_r2ZLaYQ9GGrbHA==\",\n    secret:\"45845870684\",\n    id:\"mah@mah.com\"\n  },\n  {\n    ticket: \"MIGTMAoMATYCAgDeAgEABEEEKJZVxMEXbkSZZBWnNUTX_5ieu8GUqf0bx_a0tBPF6QYskABaMJBYhDOXsmQt3csk_TfMZ2wdmfRkK7ePCOI2kgNCAEZYXbNmWXDsAqIc5uf7SirR-dLCMLdEVN5teFrV93VbcKE_DED8c6jtFQ5LH2SRXwPEtXZqWfEh1c2OHTEYqfwb\",\n    secret:\"45845870684\",\n    id:\"mah@mah.com\"\n  },\n  {\n    ticket: \"MIGSMAkMATECAQECAQAEQQQollXEwRduRJlkFac1RNf_mJ67wZSp_RvH9rS0E8XpBiyQAFowkFiEM5eyZC3dyyT9N8xnbB2Z9GQrt48I4jaSA0IAOf4d0N9shWfPIgRXZPdBRhlRyIARDT0tJwNWYwy2ILVKnIy-qPzFsgdI6sZHm1OY6UsJKuDlp0A7EMC8vS5YhRs=\",\n    secret:\"45845870684\",\n    id:\"mah@mah.com\"\n  },\n];\n\nfunction App() {\n\n  if(document.hasStorageAccess) {\n    document.hasStorageAccess().then((hasAccess) => {\n      console.log(\"user access: \", hasAccess);\n      if (!hasAccess) {\n        document.requestStorageAccess().then(hasAccessFromRequest => {\n          console.log(\"user access from request: \", hasAccessFromRequest);\n        });\n      }\n    });\n  }\n\n  // local State: tokens[], setTokens: Method to update the state of tokens.\n  let [tokens, setTokens] = useState([]);\n  // create instance of Negotiator.\n  const filter = {};\n  const token = \"devcon-ticket\";\n  const options = {};\n  const negotiator = new Negotiator(filter, token, options);\n  //\n  useEffect(() => {\n    // on success assign tokens to react state\n    negotiator.getTokenInstances(res => {\n      if(res.success) setTokens(res.tokens);\n    });\n  }, []);\n\n  // This is one example of how the ticket can be loaded inside a new tab\n  // when navigating back to this page you will find the ticket in view.\n  // Alternative ways include; navigation to the ticket store page, which redirects\n  // back to this page once complete.\n  const openTicketInNewTab = ({event, ticket, secret, id}) => {\n    event.preventDefault();\n    negotiator.addTokenThroughIframe({ ticket, secret, id });\n    // For this demo - where tickets are loaded from within the page a timeout is used to allow time for the token to be negotiated\n    // and loaded into the view. \n    // In a scenario where the ticket is embeded within a URL, when the end user navigates to the link, links could be provided in this\n    // page to direct the user e.g. to Devcon or third parties who accept the token. \n    setTimeout(() => {\n      negotiator.getTokenInstances(res => {\n        if(res.success) setTokens(res.tokens);\n      });\n    }, 5000);\n  }\n\n  return (\n    <main>\n      <a href=\"/\"><img className=\"logo\" src=\"./devcon.svg\"></img></a>\n      <div className=\"flexCenter\">\n        <p>[DEMO Ticket Issuer Website]</p>\n      </div>\n      <div className=\"flexCenter\">\n        <img className=\"devcon_bogota\" src=\"./devcon_bogota.svg\"></img>\n      </div>\n      <div className=\"flexCenter\">\n        <p>A Devcon ticket provides access to the event and special offers between the dates X-XX for hotel bookings, travel, restaurants and more.</p>\n      </div>\n      <div className=\"flexCenter\">\n        <p>Your tickets:</p>\n      </div>\n      <div className=\"flexCenter\">\n        <div className=\"tokensWrapper\">\n          {\n            tokens && tokens.length > 0 && tokens.map((tokenInstance, index) => {\n              return <Card key={index} tokenInstance={tokenInstance} />\n            })\n          }\n          {\n            !tokens.length && <div>\n              <b>- no ticket found -</b>\n              <p>Generate ticket:</p>\n              <div className=\"ticketWrapper\">\n                {\n                  mockTicketData.map((mockTicket, index) => {\n                    return (\n                      <button key={index} className=\"makeTicket\" onClick={event => openTicketInNewTab({ \n                        event,\n                        ticket: mockTicket.ticket,\n                        secret: mockTicket.secret,\n                        id: mockTicket.id\n                      })}>Create Ticket</button> \n                    )\n                  })\n                }\n              </div>\n            </div>\n          }\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}