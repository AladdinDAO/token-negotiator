{"version":3,"sources":["Card/index.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","media","height","MediaCard","tokenInstance","classes","Card","className","CardMedia","image","title","CardContent","Typography","gutterBottom","variant","component","ticketClass","toString","color","ticketId","devconId","App","useState","tokens","setTokens","negotiator","Negotiator","useEffect","getTokenInstances","then","error","console","log","length","map","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAQMA,G,MAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,QA4BGC,MAxBf,YAAuC,IAAlBC,EAAiB,EAAjBA,cACbC,EAAUR,IAChB,OACE,eAACS,EAAA,EAAD,CAAMC,UAAU,OAAhB,UACE,cAACC,EAAA,EAAD,CACED,UAAWF,EAAQJ,MACnBQ,MAAM,aACNC,MAAM,UAER,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,KAAhD,SACGX,EAAcY,YAAYC,aAE7B,eAACL,EAAA,EAAD,CAAYE,QAAQ,QAAQI,MAAM,gBAAgBH,UAAU,IAA5D,wBACcX,EAAce,SAASF,cAErC,eAACL,EAAA,EAAD,CAAYE,QAAQ,QAAQI,MAAM,gBAAgBH,UAAU,IAA5D,wBACcX,EAAcgB,SAASH,qB,MCE9BI,MA7Bf,WAAe,MAEaC,mBAAS,IAFtB,mBAERC,EAFQ,KAEAC,EAFA,KAIPC,EAAa,IAAIC,IAWvB,OATAC,qBAAU,WAERF,EAAWG,oBAAoBC,MAAK,SAACN,GAEnCC,EAAUD,MACT,SAACO,GACFC,QAAQC,IAAIF,QAEb,IAED,gCAEIP,EAAOU,OAAS,GAAKV,EAAOW,KAAI,SAAC9B,EAAe+B,GAC9C,OAAO,cAAC,EAAD,CAAkB/B,cAAeA,GAAtB+B,OAInBZ,EAAOU,QAAU,sDClBXG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e4f57f0b.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport './Card.css';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nfunction MediaCard({ tokenInstance }) {\n  const classes = useStyles();\n  return (\n    <Card className=\"card\">\n      <CardMedia\n        className={classes.media}\n        image=\"./mock.png\"\n        title=\"token\"\n      />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {tokenInstance.ticketClass.toString()}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          Ticket Id: {tokenInstance.ticketId.toString()}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          Devcon Id: {tokenInstance.devconId.toString()}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default MediaCard;\n","import React, { useState, useEffect } from 'react';\nimport { Negotiator } from 'token-negotiator';\nimport Card from './Card';\nimport './App.css';\n\n// A minimal example to read tokens and render them to a view.\n\nfunction App() {\n  // local State: tokens[], setTokens: Method to update the state of tokens.\n  let [tokens, setTokens] = useState([]);\n  // create instance of Negotiator.\n  const negotiator = new Negotiator();\n  // react effect\n  useEffect(() => {\n    // on success assign tokens to react state\n    negotiator.getTokenInstances().then((tokens) => {\n      // react event to update state of tokens, component re-renders to show the latest tokens.\n      setTokens(tokens);\n    }, (error) => {\n      console.log(error);\n    });\n  }, []);\n  return (\n    <div>\n      {\n        tokens.length > 0 && tokens.map((tokenInstance, index) => {\n          return <Card key={index} tokenInstance={tokenInstance} />\n        })\n      }\n      {\n        !tokens.length && <p>No tickets found.</p>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}